@page "/fetchdata"
@using System.Text.RegularExpressions
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<h4>Enter City</h4>
<input type="text" @bind="@cityName"/>
<button @onclick="GetWeatherData"> Get the Weather Data</button>

<br />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    var today = DateTime.Today;

    <h4>Today: @today.ToShortDateString()</h4>
    <p>City Name: @cityName</p>
    <p>Wind: @forecasts.Wind</p>
    <p>Temp(C): @forecasts.Temperature</p>
    <p>Temp(f): @forecasts.TemperatureF °F</p>
    <p>Summary: @forecasts.Description</p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Wind</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.Forecast)
            {
                try
                {
                      <tr>
                        <td>@today.AddDays(int.Parse(forecast.Day)).ToShortDateString()</td>
                        <td>@forecast.Temperature</td>
                        <td>@forecast.TemperatureF °F</td>
                        <td>@forecast.Wind</td>
                    </tr>
                }
                catch (Exception)
                {
                    
                    throw;
                }
               
            }
        </tbody>
    </table>
}

@code {
    public string cityName = "Brentwood,TN";
    private WeatherForecast? forecasts;

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");

        await callWeatherApi();
    }

    private async Task GetWeatherData()
    {
        await callWeatherApi();
    }
    private async Task callWeatherApi()
    {
         forecasts = await Http.GetFromJsonAsync<WeatherForecast>(cityName);
    }

    public partial class  WeatherForecast: Forecast 
    {
        public string? Description  { get; set; }   
        public Forecast[]? Forecast { get; set; }
    }
    public class Forecast
    {

        public string? Temperature { get; set; }

        public string? Day { get; set; }

        public string? Wind { get; set; }

        public int TemperatureF =>  32 + (int)(double.Parse(removeStringKeepNumber(Temperature)) / 0.5556);

    }

    public static string removeStringKeepNumber(string input)
    {
        string result = Regex.Replace(input, "[^0-9]+", string.Empty);
        return string.IsNullOrWhiteSpace(result)? "32" : result;
    }
}
